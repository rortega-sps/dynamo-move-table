name: sia-deploy

on:
  pull_request:
    branches: [ develop ]

  workflow_dispatch:
    inputs:
      ambiente:
        type: choice
        description: 'Ambiente al cual se despliega'
        required: true
        options:
        - develop
        - preprod
        - production
      proyecto:
        type: choice
        description: 'Pruebas con Tag Checkout'
        required: true
        options:
        - sia-utileria-notificaciones-teams
        - sia-afore-md
        - sia-afore-mo
      version:
        type: string
        description: 'Número de versión de la liberación'
        required: true
jobs:
################ PRODUCTION #######################
  deployProduction:

    runs-on: ubuntu-latest

    environment: ${{github.event.inputs.ambiente}}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: refs/tags/${{github.event.inputs.proyecto}}/${{github.event.inputs.version}}

      # Imprimir variables

      - name: "Variables de referencia"
        run: |
          echo "Head Ref - $GITHUB_HEAD_REF"
          echo "Branch -  $GITHUB_REF"
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: aws-actions/setup-sam@v0
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET }}
          aws-region: us-east-1
      # Colocar variable de ambiente
      - run: echo "samEnv=prod" >> $GITHUB_ENV
      # Crear bucket si no existe
      - name: "Crear bucket production si no existe"
        run: aws s3api head-bucket --bucket "pfg-sia-sam-trunk-based" 2>/dev/null || aws s3 mb s3://pfg-sia-sam-trunk-based
      # Obtener nombre de carpeta
      - run: echo "samName=${PWD##*/}" >> $GITHUB_ENV
      # Construye usando Docker
      - name: "Construir SAM production"
        run: sam build --use-container
      # Aplicar cambios en la aplicación no muestra error si el stack no cambia
      - name: "Desplegar SAM production"
        run: |
          sam deploy \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset \
          --stack-name "${{env.samName}}-${{env.samEnv}}" \
          --s3-bucket "pfg-sia-sam-trunk-based" \
          --s3-prefix "${{env.samName}}-${{env.samEnv}}" \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --region "us-east-1" \
          --parameter-overrides "EnvName=${{env.samEnv}} KeyKMSARN=${{secrets.AWS_KMS_ARN}}"
      - name: "Stack version"
        run: |
          aws cloudformation update-stack \
          --stack-name "${{env.samName}}-${{env.samEnv}}" \
          --use-previous-template \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
          --tags \
              Key=version,Value=${{github.event.inputs.version}}
      - name: "Notificación de error"
        if: ${{ failure() }}
        run: |
          echo "Fallido"
